---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: script-wftmpl
  namespace: playground
  labels:
    app: script-wftmpl
spec: 
  serviceAccountName: playground-sa
  entrypoint: main
  arguments:
    parameters:
    - name: author
      value: dickens
    - name: title
      value: great expectation
    - name: endpoint
      value: __BUCKET_ENDPOINT__

  templates:
  - name: main
    inputs:
      parameters:
      - name: author
      - name: title
      - name: endpoint
    outputs:
      artifacts:
      - name: books
        path: books
        s3:
          endpoint: "{{ inputs.parameters.endpoint }}"
          bucket: acme
          key: "books/{{ inputs.parameters.title }}-{{ inputs.parameters.author }}.tgz"
          accessKeySecret:
            name: bucket-secret
            key: accessKey
          secretKeySecret:
            name: bucket-secret
            key: secretKey
    script:
      image: node:20
      imagePullPolicy: IfNotPresent
      command: [ 'node' ]
      source: |

        const fs = require('fs')

        const author = '{{ inputs.parameters.author }}'
        const title = '{{ inputs.parameters.title }}'
        const filename = `books/${title}-${author}`

        const query = encodeURI(`${author} ${title}`)

        const endpoint = `https://gutendex.com/books/?search=${query}`

        console.info(endpoint)

        fs.promises.mkdir('books')
          .then(_ => fetch(endpoint))
          .then(result => result.json())
          .then(result => result.results
              .map(r => r.formats)
              .map(r => {
                for (let s in r)
                  if (s.startsWith('text/plain'))
                    return r[s]
                return []
              })
          )
          .then(result => result.flat(1)[0])
          .then(result => fetch(result).then(result => result.text()))
          .then(result => fs.promises.writeFile(filename, result))
          .then(_ => console.info(`Completed: ${new Date()}`)) 
          .catch(error => console.error('error ', error))
