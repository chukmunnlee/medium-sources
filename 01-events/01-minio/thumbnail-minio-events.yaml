---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: minio-es
  namespace: playground
spec:
  eventBusName: kafka-eb
  template:
    metadata:
      name: minio-es-po
    serviceAccountName: playground-sa
  minio:
    thumbnail:
      bucket: 
        name: acme
      endpoint: minio-svc.playground.svc.cluster.local:9000
      events:
      - s3:ObjectCreated:Put
      - s3:ObjectCreated:Post
      insecure: true
      accessKey:
        name: minio-secret
        key: accessKey
      secretKey:
        name: minio-secret
        key: secretKey

---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: minio-sn
  namespace: playground
spec:
  eventBusName: kafka-eb
  dependencies:
  - name: payload
    eventSourceName: minio-es
    eventName: thumbnail
    filters: 
      exprs:
      - expr: count > 0
        fields:
        - name: count
          path: notification.#(s3.object.contentType%"image/*")#|#

    transform: 
      script: |-

        local to_thumbnail = {}

        for i, v in ipairs(event["notification"]) do

          local j = v["s3"]["object"]["key"]
          local content_type = v["s3"]["object"]["contentType"]

          if content_type:find("^image/") ~= nil then

            local img = {}
            local dir = string.match(j, "/[^/]*$")

            if dir then
              img["directory"] = string.sub(j, 1, #j - #dir)
              img["imageName"] = string.sub(j, #j - #dir + 2, #j)
            else
              img["directory"] = string.sub(j, 1, string.find(j, ".", 1, true) - 1)
              img["imageName"] = j
            end

            img["dimension"] = "128x128 256x256 512x152 1024x1024"

            table.insert(to_thumbnail, img)
          end
        end

        event["images"] = to_thumbnail

        return event

  triggers:
  - template: 
      name: thumbnail
      parameters:
      - src:
          dependencyName: payload
          dataKey: images
        dest: spec.arguments.0.value
      argoWorkflow:
        source:
          resource:
            apiVersion: argoproj.io/v1alpha1
            kind: Workflow
            metadata:
              generateName: script-resize-wf-
              namespace: playground
            spec:
              serviceAccountName: playground-sa
              artifactRepositoryRef:
                key: dospaces-uncomp
              arguments:
                parameters:
                - name: images
                  value: |
                    [
                      { 
                        "directory": "convert", 
                        "imageName": "dilbert.gif", 
                        "dimensions": "128x128 256x256 512x152 1024x1024"
                      }
                    ]
              entrypoint: main

              templates:
              - name: main
                inputs:
                  parameters:
                  - name: images
                steps:
                - - name: resize-image
                    arguments:
                      parameters:
                      - name: directory
                        value: "{{ item.directory }}"
                      - name: imageName
                        value: "{{ item.imageName }}"
                      - name: dimensions
                        value: "{{ item.dimensions }}"
                    withParam: "{{ inputs.parameters.images }}"
                    template: thumbnail

              - name: thumbnail
                inputs:
                  parameters:
                  - name: directory
                  - name: imageName
                  - name: dimensions
                  artifacts:
                  - name: storage
                    path: /mnt
                    s3:
                      key: "{{ inputs.parameters.directory }}"
                outputs:
                  artifacts:
                  - name: storage
                    path: /mnt/resized
                    subPath: "{{ inputs.parameters.dimension}}-{{ inputs.parameters.imageName }}"
                    s3:
                      key: "{{ inputs.parameters.directory }}/resized/{{ inputs.parameters.imageName }}.tgz"
                script:
                  image: vulhub/imagemagick:7.1.0-49
                  imagePullPolicy: IfNotPresent
                  workingDir: /mnt
                  command: [ "/bin/bash" ]
                  source: |
                    mkdir -p resized
                    set "{{ inputs.parameters.dimensions }}"
                    for IMG_DIM in $*; do 
                      convert "{{ inputs.parameters.imageName }}" -resize $IMG_DIM "resized/${IMG_DIM}-{{ inputs.parameters.imageName }}" 
                    done
