---
apiVersion: v1
kind: Namespace
metadata:
  name: api

---
apiVersion: v1
kind: Service
metadata:
  name: api-svc
  namespace: api
  labels:
    app: api
    name: api-svc
spec:
  type: ClusterIP
  selector:
    app: api
    name: api-po
  ports:
  - port: 3000
    targetPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: canary-api-svc
  namespace: api
  labels:
    app: api
    name: api-svc
spec:
  type: ClusterIP
  selector:
    app: api
    name: api-po
  ports:
  - port: 3000
    targetPort: 3000

---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: api-ro
  namespace: api
  labels:
    app: api
    name: api-ro

spec:
  replicas: 4
  selector:
    matchLabels:
      app: api
      name: api-po

  strategy:
    canary:
      maxSurge: 50%
      maxUnavailable: 0
      stableService: api-svc
      canaryService: canary-api-svc
      steps:
      - setCanaryScale:
          weight: 25
      # Sets header based route with specified header values
      # Setting header based route will send all traffic to the canary for the requests 
      # with a specified header, in this case request header "version":"2"
      # (supported only with trafficRouting, for Istio only at the moment)
      - setMirrorRoute:
          name: mirror-canary
          percentage: 100
          match:
          - method: 
              regex: '.*'
            path:
              regex: '.*'
      - pause: {}
      trafficRouting:
        # This is a list of routes that Argo Rollouts has the rights to manage it is currently only required for
        # setMirrorRoute and setHeaderRoute. The order of managedRoutes array also sets the precedence of the route
        # in the traffic router. Argo Rollouts will place these routes in the order specified above any routes already
        # defined in the used traffic router if something exists. The names here must match the names from the 
        # setHeaderRoute and setMirrorRoute steps.
        managedRoutes:
        - name: mirror-canary
        istio:
          virtualService:
            name: api-vs
            routes:
            - api-svc

  template:
    metadata:
      labels:
        app: api
        name: api-po
    spec:
      containers:
      - name: api-container
        image: chukmunnlee/fake-api:v1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000

